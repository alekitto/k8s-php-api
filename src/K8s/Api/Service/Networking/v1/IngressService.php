<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.28.11
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Service\Networking\v1;

use K8s\Api\Model\Api\Networking\v1\Ingress;
use K8s\Api\Model\Api\Networking\v1\IngressList;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\Status;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\WatchEvent;
use K8s\Core\Contract\ApiInterface;

class IngressService
{
    /** @var ApiInterface */
    private $api;

    /** @var string|null */
    private $namespace;

    public function __construct(ApiInterface $api)
    {
        $this->api = $api;
    }

    public function useNamespace(string $namespace): self
    {
        $this->namespace = $namespace;

        return $this;
    }

    /**
     * List or watch objects of kind Ingress
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#list-ingress-v1-networking-k8s-io
     */
    public function listNetworkingV1ForAllNamespaces(array $query = []): IngressList
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = IngressList::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/ingresses',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'list',
            $options
        );
    }

    /**
     * List or watch objects of kind Ingress
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#list-ingress-v1-networking-k8s-io
     */
    public function listNetworkingV1Namespaced(array $query = []): IngressList
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = IngressList::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'list',
            $options
        );
    }

    /**
     * Delete collection of Ingress
     *
     * Allowed query parameters:
     *   dryRun
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#delete-collection-ingress-v1-networking-k8s-io
     */
    public function deleteNetworkingV1CollectionNamespaced(array $query = []): Status
    {
        $options['query'] = $query;
        $options['method'] = 'delete';
        $options['model'] = Status::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'deletecollection',
            $options
        );
    }

    /**
     * Create an Ingress
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#create-ingress-v1-networking-k8s-io
     */
    public function createNetworkingV1Namespaced(Ingress $ingress, array $query = []): Ingress
    {
        $options['query'] = $query;
        $options['method'] = 'post';
        $options['body'] = $ingress;
        $options['model'] = Ingress::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'post',
            $options
        );
    }

    /**
     * Read the specified Ingress
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#read-ingress-v1-networking-k8s-io
     */
    public function readNetworkingV1Namespaced(string $name, array $query = []): Ingress
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = Ingress::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'get',
            $options
        );
    }

    /**
     * Delete an Ingress
     *
     * Allowed query parameters:
     *   dryRun
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#delete-ingress-v1-networking-k8s-io
     */
    public function deleteNetworkingV1Namespaced(string $name, array $query = []): Status
    {
        $options['query'] = $query;
        $options['method'] = 'delete';
        $options['model'] = Status::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'delete',
            $options
        );
    }

    /**
     * Partially update the specified Ingress
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#patch-ingress-v1-networking-k8s-io
     */
    public function patchNetworkingV1Namespaced(string $name, array $query = []): Ingress
    {
        $options['query'] = $query;
        $options['method'] = 'patch';
        $options['model'] = Ingress::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'patch',
            $options
        );
    }

    /**
     * Replace the specified Ingress
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#put-ingress-v1-networking-k8s-io
     */
    public function replaceNetworkingV1Namespaced(string $name, Ingress $ingress, array $query = []): Ingress
    {
        $options['query'] = $query;
        $options['method'] = 'put';
        $options['body'] = $ingress;
        $options['model'] = Ingress::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'put',
            $options
        );
    }

    /**
     * Read status of the specified Ingress
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#read-ingress-v1-networking-k8s-io
     */
    public function readNetworkingV1NamespacedStatus(string $name, array $query = []): Ingress
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = Ingress::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'get',
            $options
        );
    }

    /**
     * Partially update status of the specified Ingress
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#patch-ingress-v1-networking-k8s-io
     */
    public function patchNetworkingV1NamespacedStatus(string $name, array $query = []): Ingress
    {
        $options['query'] = $query;
        $options['method'] = 'patch';
        $options['model'] = Ingress::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'patch',
            $options
        );
    }

    /**
     * Replace status of the specified Ingress
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#put-ingress-v1-networking-k8s-io
     */
    public function replaceNetworkingV1NamespacedStatus(string $name, Ingress $ingress, array $query = []): Ingress
    {
        $options['query'] = $query;
        $options['method'] = 'put';
        $options['body'] = $ingress;
        $options['model'] = Ingress::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'put',
            $options
        );
    }

    /**
     * Watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list
     * operation instead.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#watchlist-ingress-v1-networking-k8s-io
     */
    public function watchNetworkingV1ListForAllNamespaces(array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/watch/ingresses',
            [],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watchlist',
            $options
        );
    }

    /**
     * Watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list
     * operation instead.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#watchlist-ingress-v1-networking-k8s-io
     */
    public function watchNetworkingV1NamespacedList(array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses',
            [],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watchlist',
            $options
        );
    }

    /**
     * Watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list
     * operation instead, filtered to a single item with the 'fieldSelector' parameter.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#watch-ingress-v1-networking-k8s-io
     */
    public function watchNetworkingV1Namespaced(string $name, array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watch',
            $options
        );
    }
}
