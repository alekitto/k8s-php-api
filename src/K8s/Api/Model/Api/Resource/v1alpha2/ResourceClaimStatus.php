<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.29.7
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Resource\v1alpha2;

use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes
 * are.
 */
class ResourceClaimStatus
{
    /**
     * @Kubernetes\Attribute("allocation",type="model",model=AllocationResult::class)
     * @var AllocationResult|null
     */
    protected $allocation = null;

    /**
     * @Kubernetes\Attribute("deallocationRequested")
     * @var bool|null
     */
    protected $deallocationRequested = null;

    /**
     * @Kubernetes\Attribute("driverName")
     * @var string|null
     */
    protected $driverName = null;

    /**
     * @Kubernetes\Attribute("reservedFor",type="collection",model=ResourceClaimConsumerReference::class)
     * @var iterable|ResourceClaimConsumerReference[]|null
     */
    protected $reservedFor = null;

    /**
     * @param AllocationResult|null $allocation
     * @param bool|null $deallocationRequested
     * @param string|null $driverName
     * @param iterable|ResourceClaimConsumerReference[] $reservedFor
     */
    public function __construct(
        ?AllocationResult $allocation = null,
        ?bool $deallocationRequested = null,
        ?string $driverName = null,
        iterable $reservedFor = []
    ) {
        $this->allocation = $allocation;
        $this->deallocationRequested = $deallocationRequested;
        $this->driverName = $driverName;
        $this->reservedFor = new Collection($reservedFor);
    }

    /**
     * Allocation is set by the resource driver once a resource or set of resources has been allocated
     * successfully. If this is not specified, the resources have not been allocated yet.
     */
    public function getAllocation(): ?AllocationResult
    {
        return $this->allocation;
    }

    /**
     * Allocation is set by the resource driver once a resource or set of resources has been allocated
     * successfully. If this is not specified, the resources have not been allocated yet.
     *
     * @return static
     */
    public function setAllocation(AllocationResult $allocation)
    {
        $this->allocation = $allocation;

        return $this;
    }

    /**
     * DeallocationRequested indicates that a ResourceClaim is to be deallocated.
     *
     * The driver then must deallocate this claim and reset the field together with clearing the Allocation
     * field.
     *
     * While DeallocationRequested is set, no new consumers may be added to ReservedFor.
     */
    public function isDeallocationRequested(): ?bool
    {
        return $this->deallocationRequested;
    }

    /**
     * DeallocationRequested indicates that a ResourceClaim is to be deallocated.
     *
     * The driver then must deallocate this claim and reset the field together with clearing the Allocation
     * field.
     *
     * While DeallocationRequested is set, no new consumers may be added to ReservedFor.
     *
     * @return static
     */
    public function setIsDeallocationRequested(bool $deallocationRequested)
    {
        $this->deallocationRequested = $deallocationRequested;

        return $this;
    }

    /**
     * DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
     */
    public function getDriverName(): ?string
    {
        return $this->driverName;
    }

    /**
     * DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
     *
     * @return static
     */
    public function setDriverName(string $driverName)
    {
        $this->driverName = $driverName;

        return $this;
    }

    /**
     * ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references
     * a ResourceClaim which is not reserved for that Pod will not be started.
     *
     * There can be at most 32 such reservations. This may get increased in the future, but not reduced.
     *
     * @return iterable|ResourceClaimConsumerReference[]
     */
    public function getReservedFor(): ?iterable
    {
        return $this->reservedFor;
    }

    /**
     * ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references
     * a ResourceClaim which is not reserved for that Pod will not be started.
     *
     * There can be at most 32 such reservations. This may get increased in the future, but not reduced.
     *
     * @return static
     */
    public function setReservedFor(iterable $reservedFor)
    {
        $this->reservedFor = $reservedFor;

        return $this;
    }

    /**
     * @return static
     */
    public function addReservedFor(ResourceClaimConsumerReference $reservedFor)
    {
        if (!$this->reservedFor) {
            $this->reservedFor = new Collection();
        }
        $this->reservedFor[] = $reservedFor;

        return $this;
    }
}
