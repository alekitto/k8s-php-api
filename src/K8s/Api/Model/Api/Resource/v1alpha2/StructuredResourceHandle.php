<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.3
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Resource\v1alpha2;

use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * StructuredResourceHandle is the in-tree representation of the allocation result.
 */
class StructuredResourceHandle
{
    /**
     * @Kubernetes\Attribute("nodeName")
     * @var string|null
     */
    protected $nodeName = null;

    /**
     * @Kubernetes\Attribute("results",type="collection",model=DriverAllocationResult::class,isRequired=true)
     * @var iterable|DriverAllocationResult[]
     */
    protected $results;

    /**
     * @Kubernetes\Attribute("vendorClaimParameters")
     * @var object|null
     */
    protected $vendorClaimParameters = null;

    /**
     * @Kubernetes\Attribute("vendorClassParameters")
     * @var object|null
     */
    protected $vendorClassParameters = null;

    /**
     * @param iterable|DriverAllocationResult[] $results
     */
    public function __construct(iterable $results)
    {
        $this->results = new Collection($results);
    }

    /**
     * NodeName is the name of the node providing the necessary resources if the resources are local to a
     * node.
     */
    public function getNodeName(): ?string
    {
        return $this->nodeName;
    }

    /**
     * NodeName is the name of the node providing the necessary resources if the resources are local to a
     * node.
     *
     * @return static
     */
    public function setNodeName(string $nodeName)
    {
        $this->nodeName = $nodeName;

        return $this;
    }

    /**
     * Results lists all allocated driver resources.
     *
     * @return iterable|DriverAllocationResult[]
     */
    public function getResults(): iterable
    {
        return $this->results;
    }

    /**
     * Results lists all allocated driver resources.
     *
     * @return static
     */
    public function setResults(iterable $results)
    {
        $this->results = $results;

        return $this;
    }

    /**
     * @return static
     */
    public function addResults(DriverAllocationResult $result)
    {
        if (!$this->results) {
            $this->results = new Collection();
        }
        $this->results[] = $result;

        return $this;
    }

    /**
     * VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters
     * at the time that the claim was allocated.
     *
     * @return object
     */
    public function getVendorClaimParameters()
    {
        return $this->vendorClaimParameters;
    }

    /**
     * VendorClaimParameters are the per-claim configuration parameters from the resource claim parameters
     * at the time that the claim was allocated.
     *
     * @param object $vendorClaimParameters
     * @return static
     */
    public function setVendorClaimParameters($vendorClaimParameters)
    {
        $this->vendorClaimParameters = $vendorClaimParameters;

        return $this;
    }

    /**
     * VendorClassParameters are the per-claim configuration parameters from the resource class at the time
     * that the claim was allocated.
     *
     * @return object
     */
    public function getVendorClassParameters()
    {
        return $this->vendorClassParameters;
    }

    /**
     * VendorClassParameters are the per-claim configuration parameters from the resource class at the time
     * that the claim was allocated.
     *
     * @param object $vendorClassParameters
     * @return static
     */
    public function setVendorClassParameters($vendorClassParameters)
    {
        $this->vendorClassParameters = $vendorClassParameters;

        return $this;
    }
}
