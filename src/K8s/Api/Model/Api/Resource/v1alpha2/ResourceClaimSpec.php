<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.27.15
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Resource\v1alpha2;

use K8s\Core\Annotation as Kubernetes;

/**
 * ResourceClaimSpec defines how a resource is to be allocated.
 */
class ResourceClaimSpec
{
    /**
     * @Kubernetes\Attribute("allocationMode")
     * @var string|null
     */
    protected $allocationMode = null;

    /**
     * @Kubernetes\Attribute("parametersRef",type="model",model=ResourceClaimParametersReference::class)
     * @var ResourceClaimParametersReference|null
     */
    protected $parametersRef = null;

    /**
     * @Kubernetes\Attribute("resourceClassName",isRequired=true)
     * @var string
     */
    protected $resourceClassName;

    /**
     * @param string $resourceClassName
     */
    public function __construct(string $resourceClassName)
    {
        $this->resourceClassName = $resourceClassName;
    }

    /**
     * Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is
     * the default.
     */
    public function getAllocationMode(): ?string
    {
        return $this->allocationMode;
    }

    /**
     * Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is
     * the default.
     *
     * @return static
     */
    public function setAllocationMode(string $allocationMode)
    {
        $this->allocationMode = $allocationMode;

        return $this;
    }

    /**
     * ParametersRef references a separate object with arbitrary parameters that will be used by the driver
     * when allocating a resource for the claim.
     *
     * The object must be in the same namespace as the ResourceClaim.
     */
    public function getParametersRef(): ?ResourceClaimParametersReference
    {
        return $this->parametersRef;
    }

    /**
     * ParametersRef references a separate object with arbitrary parameters that will be used by the driver
     * when allocating a resource for the claim.
     *
     * The object must be in the same namespace as the ResourceClaim.
     *
     * @return static
     */
    public function setParametersRef(ResourceClaimParametersReference $parametersRef)
    {
        $this->parametersRef = $parametersRef;

        return $this;
    }

    /**
     * ResourceClassName references the driver and additional parameters via the name of a ResourceClass
     * that was created as part of the driver deployment.
     */
    public function getResourceClassName(): string
    {
        return $this->resourceClassName;
    }

    /**
     * ResourceClassName references the driver and additional parameters via the name of a ResourceClass
     * that was created as part of the driver deployment.
     *
     * @return static
     */
    public function setResourceClassName(string $resourceClassName)
    {
        $this->resourceClassName = $resourceClassName;

        return $this;
    }
}
