<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.2
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Resource\v1alpha2;

use K8s\Core\Annotation as Kubernetes;

/**
 * ResourceClaimConsumerReference contains enough information to let you locate the consumer of a
 * ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
 */
class ResourceClaimConsumerReference
{
    /**
     * @Kubernetes\Attribute("apiGroup")
     * @var string|null
     */
    protected $apiGroup = null;

    /**
     * @Kubernetes\Attribute("name",isRequired=true)
     * @var string
     */
    protected $name;

    /**
     * @Kubernetes\Attribute("resource",isRequired=true)
     * @var string
     */
    protected $resource;

    /**
     * @Kubernetes\Attribute("uid",isRequired=true)
     * @var string
     */
    protected $uid;

    /**
     * @param string $name
     * @param string $resource
     * @param string $uid
     */
    public function __construct(string $name, string $resource, string $uid)
    {
        $this->name = $name;
        $this->resource = $resource;
        $this->uid = $uid;
    }

    /**
     * APIGroup is the group for the resource being referenced. It is empty for the core API. This matches
     * the group in the APIVersion that is used when creating the resources.
     */
    public function getApiGroup(): ?string
    {
        return $this->apiGroup;
    }

    /**
     * APIGroup is the group for the resource being referenced. It is empty for the core API. This matches
     * the group in the APIVersion that is used when creating the resources.
     *
     * @return static
     */
    public function setApiGroup(string $apiGroup)
    {
        $this->apiGroup = $apiGroup;

        return $this;
    }

    /**
     * Name is the name of resource being referenced.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Name is the name of resource being referenced.
     *
     * @return static
     */
    public function setName(string $name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Resource is the type of resource being referenced, for example "pods".
     */
    public function getResource(): string
    {
        return $this->resource;
    }

    /**
     * Resource is the type of resource being referenced, for example "pods".
     *
     * @return static
     */
    public function setResource(string $resource)
    {
        $this->resource = $resource;

        return $this;
    }

    /**
     * UID identifies exactly one incarnation of the resource.
     */
    public function getUid(): string
    {
        return $this->uid;
    }

    /**
     * UID identifies exactly one incarnation of the resource.
     *
     * @return static
     */
    public function setUid(string $uid)
    {
        $this->uid = $uid;

        return $this;
    }
}
