<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.29.7
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Core\v1;

use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 */
class PersistentVolumeClaimStatus
{
    /**
     * @Kubernetes\Attribute("accessModes")
     * @var string[]|null
     */
    protected $accessModes = null;

    /**
     * @Kubernetes\Attribute("allocatedResourceStatuses")
     * @var string[]|null
     */
    protected $allocatedResourceStatuses = null;

    /**
     * @Kubernetes\Attribute("allocatedResources")
     * @var object[]|null
     */
    protected $allocatedResources = null;

    /**
     * @Kubernetes\Attribute("capacity")
     * @var object[]|null
     */
    protected $capacity = null;

    /**
     * @Kubernetes\Attribute("conditions",type="collection",model=PersistentVolumeClaimCondition::class)
     * @var iterable|PersistentVolumeClaimCondition[]|null
     */
    protected $conditions = null;

    /**
     * @Kubernetes\Attribute("currentVolumeAttributesClassName")
     * @var string|null
     */
    protected $currentVolumeAttributesClassName = null;

    /**
     * @Kubernetes\Attribute("modifyVolumeStatus",type="model",model=ModifyVolumeStatus::class)
     * @var ModifyVolumeStatus|null
     */
    protected $modifyVolumeStatus = null;

    /**
     * @Kubernetes\Attribute("phase")
     * @var string|null
     */
    protected $phase = null;

    /**
     * accessModes contains the actual access modes the volume backing the PVC has. More info:
     * https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     */
    public function getAccessModes(): ?array
    {
        return $this->accessModes;
    }

    /**
     * accessModes contains the actual access modes the volume backing the PVC has. More info:
     * https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     *
     * @return static
     */
    public function setAccessModes(array $accessModes)
    {
        $this->accessModes = $accessModes;

        return $this;
    }

    /**
     * allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names
     * follow standard Kubernetes label syntax. Valid values are either:
     *     * Un-prefixed keys:
     *         - storage - the capacity of the volume.
     *     * Custom resources must use implementation-defined prefixed names such as
     * "example.com/my-custom-resource"
     * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
     * reserved and hence may not be used.
     *
     * ClaimResourceStatus can be in any of following states:
     *     - ControllerResizeInProgress:
     *         State set when resize controller starts resizing the volume in control-plane.
     *     - ControllerResizeFailed:
     *         State set when resize has failed in resize controller with a terminal error.
     *     - NodeResizePending:
     *         State set when resize controller has finished resizing the volume but further resizing of
     *         volume is needed on the node.
     *     - NodeResizeInProgress:
     *         State set when kubelet starts resizing the volume.
     *     - NodeResizeFailed:
     *         State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
     *         NodeResizeFailed.
     * For example: if expanding a PVC for more capacity - this field can be one of the following states:
     *     - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
     *      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
     * When this field is not set, it means that no resize operation is in progress for the given PVC.
     *
     * A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
     * should ignore the update for the purpose it was designed. For example - a controller that only is
     * responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
     * resources associated with PVC.
     *
     * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     */
    public function getAllocatedResourceStatuses(): ?array
    {
        return $this->allocatedResourceStatuses;
    }

    /**
     * allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names
     * follow standard Kubernetes label syntax. Valid values are either:
     *     * Un-prefixed keys:
     *         - storage - the capacity of the volume.
     *     * Custom resources must use implementation-defined prefixed names such as
     * "example.com/my-custom-resource"
     * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
     * reserved and hence may not be used.
     *
     * ClaimResourceStatus can be in any of following states:
     *     - ControllerResizeInProgress:
     *         State set when resize controller starts resizing the volume in control-plane.
     *     - ControllerResizeFailed:
     *         State set when resize has failed in resize controller with a terminal error.
     *     - NodeResizePending:
     *         State set when resize controller has finished resizing the volume but further resizing of
     *         volume is needed on the node.
     *     - NodeResizeInProgress:
     *         State set when kubelet starts resizing the volume.
     *     - NodeResizeFailed:
     *         State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
     *         NodeResizeFailed.
     * For example: if expanding a PVC for more capacity - this field can be one of the following states:
     *     - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
     *      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
     * When this field is not set, it means that no resize operation is in progress for the given PVC.
     *
     * A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
     * should ignore the update for the purpose it was designed. For example - a controller that only is
     * responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
     * resources associated with PVC.
     *
     * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     *
     * @return static
     */
    public function setAllocatedResourceStatuses(array $allocatedResourceStatuses)
    {
        $this->allocatedResourceStatuses = $allocatedResourceStatuses;

        return $this;
    }

    /**
     * allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow
     * standard Kubernetes label syntax. Valid values are either:
     *     * Un-prefixed keys:
     *         - storage - the capacity of the volume.
     *     * Custom resources must use implementation-defined prefixed names such as
     * "example.com/my-custom-resource"
     * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
     * reserved and hence may not be used.
     *
     * Capacity reported here may be larger than the actual capacity when a volume expansion operation is
     * requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is
     * used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a
     * volume expansion capacity request is lowered, allocatedResources is only lowered if there are no
     * expansion operations in progress and if the actual volume capacity is equal or lower than the
     * requested capacity.
     *
     * A controller that receives PVC update with previously unknown resourceName should ignore the update
     * for the purpose it was designed. For example - a controller that only is responsible for resizing
     * capacity of the volume, should ignore PVC updates that change other valid resources associated with
     * PVC.
     *
     * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     */
    public function getAllocatedResources(): ?array
    {
        return $this->allocatedResources;
    }

    /**
     * allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow
     * standard Kubernetes label syntax. Valid values are either:
     *     * Un-prefixed keys:
     *         - storage - the capacity of the volume.
     *     * Custom resources must use implementation-defined prefixed names such as
     * "example.com/my-custom-resource"
     * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
     * reserved and hence may not be used.
     *
     * Capacity reported here may be larger than the actual capacity when a volume expansion operation is
     * requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is
     * used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a
     * volume expansion capacity request is lowered, allocatedResources is only lowered if there are no
     * expansion operations in progress and if the actual volume capacity is equal or lower than the
     * requested capacity.
     *
     * A controller that receives PVC update with previously unknown resourceName should ignore the update
     * for the purpose it was designed. For example - a controller that only is responsible for resizing
     * capacity of the volume, should ignore PVC updates that change other valid resources associated with
     * PVC.
     *
     * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     *
     * @return static
     */
    public function setAllocatedResources(array $allocatedResources)
    {
        $this->allocatedResources = $allocatedResources;

        return $this;
    }

    /**
     * capacity represents the actual resources of the underlying volume.
     */
    public function getCapacity(): ?array
    {
        return $this->capacity;
    }

    /**
     * capacity represents the actual resources of the underlying volume.
     *
     * @return static
     */
    public function setCapacity(array $capacity)
    {
        $this->capacity = $capacity;

        return $this;
    }

    /**
     * conditions is the current Condition of persistent volume claim. If underlying persistent volume is
     * being resized then the Condition will be set to 'ResizeStarted'.
     *
     * @return iterable|PersistentVolumeClaimCondition[]
     */
    public function getConditions(): ?iterable
    {
        return $this->conditions;
    }

    /**
     * conditions is the current Condition of persistent volume claim. If underlying persistent volume is
     * being resized then the Condition will be set to 'ResizeStarted'.
     *
     * @return static
     */
    public function setConditions(iterable $conditions)
    {
        $this->conditions = $conditions;

        return $this;
    }

    /**
     * @return static
     */
    public function addConditions(PersistentVolumeClaimCondition $condition)
    {
        if (!$this->conditions) {
            $this->conditions = new Collection();
        }
        $this->conditions[] = $condition;

        return $this;
    }

    /**
     * currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
     * When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is an alpha
     * field and requires enabling VolumeAttributesClass feature.
     */
    public function getCurrentVolumeAttributesClassName(): ?string
    {
        return $this->currentVolumeAttributesClassName;
    }

    /**
     * currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
     * When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is an alpha
     * field and requires enabling VolumeAttributesClass feature.
     *
     * @return static
     */
    public function setCurrentVolumeAttributesClassName(string $currentVolumeAttributesClassName)
    {
        $this->currentVolumeAttributesClassName = $currentVolumeAttributesClassName;

        return $this;
    }

    /**
     * ModifyVolumeStatus represents the status object of ControllerModifyVolume operation. When this is
     * unset, there is no ModifyVolume operation being attempted. This is an alpha field and requires
     * enabling VolumeAttributesClass feature.
     */
    public function getModifyVolumeStatus(): ?ModifyVolumeStatus
    {
        return $this->modifyVolumeStatus;
    }

    /**
     * ModifyVolumeStatus represents the status object of ControllerModifyVolume operation. When this is
     * unset, there is no ModifyVolume operation being attempted. This is an alpha field and requires
     * enabling VolumeAttributesClass feature.
     *
     * @return static
     */
    public function setModifyVolumeStatus(ModifyVolumeStatus $modifyVolumeStatus)
    {
        $this->modifyVolumeStatus = $modifyVolumeStatus;

        return $this;
    }

    /**
     * phase represents the current phase of PersistentVolumeClaim.
     */
    public function getPhase(): ?string
    {
        return $this->phase;
    }

    /**
     * phase represents the current phase of PersistentVolumeClaim.
     *
     * @return static
     */
    public function setPhase(string $phase)
    {
        $this->phase = $phase;

        return $this;
    }
}
