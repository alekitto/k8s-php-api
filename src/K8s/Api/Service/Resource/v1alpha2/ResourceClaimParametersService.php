<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.3
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Service\Resource\v1alpha2;

use K8s\Api\Model\Api\Resource\v1alpha2\ResourceClaimParameters;
use K8s\Api\Model\Api\Resource\v1alpha2\ResourceClaimParametersList;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\Status;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\WatchEvent;
use K8s\Core\Contract\ApiInterface;

class ResourceClaimParametersService
{
    /** @var ApiInterface */
    private $api;

    /** @var string|null */
    private $namespace;

    public function __construct(ApiInterface $api)
    {
        $this->api = $api;
    }

    public function useNamespace(string $namespace): self
    {
        $this->namespace = $namespace;

        return $this;
    }

    /**
     * List or watch objects of kind ResourceClaimParameters
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#list-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function listResourceV1alpha2Namespaced(array $query = []): ResourceClaimParametersList
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = ResourceClaimParametersList::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'list',
            $options
        );
    }

    /**
     * Delete collection of ResourceClaimParameters
     *
     * Allowed query parameters:
     *   dryRun
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#delete-collection-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function deleteResourceV1alpha2CollectionNamespaced(array $query = []): Status
    {
        $options['query'] = $query;
        $options['method'] = 'delete';
        $options['model'] = Status::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'deletecollection',
            $options
        );
    }

    /**
     * Create ResourceClaimParameters
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#create-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function createResourceV1alpha2Namespaced(ResourceClaimParameters $resourceClaimParameters, array $query = []): ResourceClaimParameters
    {
        $options['query'] = $query;
        $options['method'] = 'post';
        $options['body'] = $resourceClaimParameters;
        $options['model'] = ResourceClaimParameters::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'post',
            $options
        );
    }

    /**
     * Read the specified ResourceClaimParameters
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#read-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function readResourceV1alpha2Namespaced(string $name, array $query = []): ResourceClaimParameters
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = ResourceClaimParameters::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'get',
            $options
        );
    }

    /**
     * Delete ResourceClaimParameters
     *
     * Allowed query parameters:
     *   dryRun
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#delete-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function deleteResourceV1alpha2Namespaced(string $name, array $query = []): ResourceClaimParameters
    {
        $options['query'] = $query;
        $options['method'] = 'delete';
        $options['model'] = ResourceClaimParameters::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'delete',
            $options
        );
    }

    /**
     * Partially update the specified ResourceClaimParameters
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#patch-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function patchResourceV1alpha2Namespaced(string $name, array $query = []): ResourceClaimParameters
    {
        $options['query'] = $query;
        $options['method'] = 'patch';
        $options['model'] = ResourceClaimParameters::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'patch',
            $options
        );
    }

    /**
     * Replace the specified ResourceClaimParameters
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#put-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function replaceResourceV1alpha2Namespaced(string $name, ResourceClaimParameters $resourceClaimParameters, array $query = []): ResourceClaimParameters
    {
        $options['query'] = $query;
        $options['method'] = 'put';
        $options['body'] = $resourceClaimParameters;
        $options['model'] = ResourceClaimParameters::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'put',
            $options
        );
    }

    /**
     * List or watch objects of kind ResourceClaimParameters
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#list-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function listResourceV1alpha2ForAllNamespaces(array $query = []): ResourceClaimParametersList
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = ResourceClaimParametersList::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/resourceclaimparameters',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'list',
            $options
        );
    }

    /**
     * Watch individual changes to a list of ResourceClaimParameters. deprecated: use the 'watch' parameter
     * with a list operation instead.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#watchlist-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function watchResourceV1alpha2NamespacedList(array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimparameters',
            [],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watchlist',
            $options
        );
    }

    /**
     * Watch changes to an object of kind ResourceClaimParameters. deprecated: use the 'watch' parameter
     * with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#watch-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function watchResourceV1alpha2Namespaced(string $name, array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimparameters/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watch',
            $options
        );
    }

    /**
     * Watch individual changes to a list of ResourceClaimParameters. deprecated: use the 'watch' parameter
     * with a list operation instead.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#watchlist-resourceclaimparameters-v1alpha2-resource-k8s-io
     */
    public function watchResourceV1alpha2ListForAllNamespaces(array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/resource.k8s.io/v1alpha2/watch/resourceclaimparameters',
            [],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watchlist',
            $options
        );
    }
}
