<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.2
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Storagemigration\v1alpha1;

use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * Status of the storage version migration.
 */
class StorageVersionMigrationStatus
{
    /**
     * @Kubernetes\Attribute("conditions",type="collection",model=MigrationCondition::class)
     * @var iterable|MigrationCondition[]|null
     */
    protected $conditions = null;

    /**
     * @Kubernetes\Attribute("resourceVersion")
     * @var string|null
     */
    protected $resourceVersion = null;

    /**
     * @param iterable|MigrationCondition[] $conditions
     * @param string|null $resourceVersion
     */
    public function __construct(iterable $conditions = [], ?string $resourceVersion = null)
    {
        $this->conditions = new Collection($conditions);
        $this->resourceVersion = $resourceVersion;
    }

    /**
     * The latest available observations of the migration's current state.
     *
     * @return iterable|MigrationCondition[]
     */
    public function getConditions(): ?iterable
    {
        return $this->conditions;
    }

    /**
     * The latest available observations of the migration's current state.
     *
     * @return static
     */
    public function setConditions(iterable $conditions)
    {
        $this->conditions = $conditions;

        return $this;
    }

    /**
     * @return static
     */
    public function addConditions(MigrationCondition $condition)
    {
        if (!$this->conditions) {
            $this->conditions = new Collection();
        }
        $this->conditions[] = $condition;

        return $this;
    }

    /**
     * ResourceVersion to compare with the GC cache for performing the migration. This is the current
     * resource version of given group, version and resource when kube-controller-manager first observes
     * this StorageVersionMigration resource.
     */
    public function getResourceVersion(): ?string
    {
        return $this->resourceVersion;
    }

    /**
     * ResourceVersion to compare with the GC cache for performing the migration. This is the current
     * resource version of given group, version and resource when kube-controller-manager first observes
     * this StorageVersionMigration resource.
     *
     * @return static
     */
    public function setResourceVersion(string $resourceVersion)
    {
        $this->resourceVersion = $resourceVersion;

        return $this;
    }
}
