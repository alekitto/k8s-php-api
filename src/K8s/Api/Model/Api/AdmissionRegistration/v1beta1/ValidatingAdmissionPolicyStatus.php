<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.28.11
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\AdmissionRegistration\v1beta1;

use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\Condition;
use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
 */
class ValidatingAdmissionPolicyStatus
{
    /**
     * @Kubernetes\Attribute("conditions",type="collection",model=Condition::class)
     * @var iterable|Condition[]|null
     */
    protected $conditions = null;

    /**
     * @Kubernetes\Attribute("observedGeneration")
     * @var int|null
     */
    protected $observedGeneration = null;

    /**
     * @Kubernetes\Attribute("typeChecking",type="model",model=TypeChecking::class)
     * @var TypeChecking|null
     */
    protected $typeChecking = null;

    /**
     * @param iterable|Condition[] $conditions
     * @param int|null $observedGeneration
     * @param TypeChecking|null $typeChecking
     */
    public function __construct(iterable $conditions = [], ?int $observedGeneration = null, ?TypeChecking $typeChecking = null)
    {
        $this->conditions = new Collection($conditions);
        $this->observedGeneration = $observedGeneration;
        $this->typeChecking = $typeChecking;
    }

    /**
     * The conditions represent the latest available observations of a policy's current state.
     *
     * @return iterable|Condition[]
     */
    public function getConditions(): ?iterable
    {
        return $this->conditions;
    }

    /**
     * The conditions represent the latest available observations of a policy's current state.
     *
     * @return static
     */
    public function setConditions(iterable $conditions)
    {
        $this->conditions = $conditions;

        return $this;
    }

    /**
     * @return static
     */
    public function addConditions(Condition $condition)
    {
        if (!$this->conditions) {
            $this->conditions = new Collection();
        }
        $this->conditions[] = $condition;

        return $this;
    }

    /**
     * The generation observed by the controller.
     */
    public function getObservedGeneration(): ?int
    {
        return $this->observedGeneration;
    }

    /**
     * The generation observed by the controller.
     *
     * @return static
     */
    public function setObservedGeneration(int $observedGeneration)
    {
        $this->observedGeneration = $observedGeneration;

        return $this;
    }

    /**
     * The results of type checking for each expression. Presence of this field indicates the completion of
     * the type checking.
     */
    public function getTypeChecking(): ?TypeChecking
    {
        return $this->typeChecking;
    }

    /**
     * The results of type checking for each expression. Presence of this field indicates the completion of
     * the type checking.
     *
     * @return static
     */
    public function setTypeChecking(TypeChecking $typeChecking)
    {
        $this->typeChecking = $typeChecking;

        return $this;
    }
}
