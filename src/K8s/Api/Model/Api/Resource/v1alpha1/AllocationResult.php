<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.26.15
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Resource\v1alpha1;

use K8s\Api\Model\Api\Core\v1\NodeSelector;
use K8s\Core\Annotation as Kubernetes;

/**
 * AllocationResult contains attributed of an allocated resource.
 */
class AllocationResult
{
    /**
     * @Kubernetes\Attribute("availableOnNodes",type="model",model=NodeSelector::class)
     * @var NodeSelector|null
     */
    protected $availableOnNodes = null;

    /**
     * @Kubernetes\Attribute("resourceHandle")
     * @var string|null
     */
    protected $resourceHandle = null;

    /**
     * @Kubernetes\Attribute("shareable")
     * @var bool|null
     */
    protected $shareable = null;

    /**
     * @param NodeSelector|null $availableOnNodes
     * @param string|null $resourceHandle
     * @param bool|null $shareable
     */
    public function __construct(?NodeSelector $availableOnNodes = null, ?string $resourceHandle = null, ?bool $shareable = null)
    {
        $this->availableOnNodes = $availableOnNodes;
        $this->resourceHandle = $resourceHandle;
        $this->shareable = $shareable;
    }

    /**
     * This field will get set by the resource driver after it has allocated the resource driver to inform
     * the scheduler where it can schedule Pods using the ResourceClaim.
     *
     * Setting this field is optional. If null, the resource is available everywhere.
     */
    public function getAvailableOnNodes(): ?NodeSelector
    {
        return $this->availableOnNodes;
    }

    /**
     * This field will get set by the resource driver after it has allocated the resource driver to inform
     * the scheduler where it can schedule Pods using the ResourceClaim.
     *
     * Setting this field is optional. If null, the resource is available everywhere.
     *
     * @return static
     */
    public function setAvailableOnNodes(NodeSelector $availableOnNodes)
    {
        $this->availableOnNodes = $availableOnNodes;

        return $this;
    }

    /**
     * ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is
     * opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if
     * needed.
     *
     * The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
     */
    public function getResourceHandle(): ?string
    {
        return $this->resourceHandle;
    }

    /**
     * ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is
     * opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if
     * needed.
     *
     * The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
     *
     * @return static
     */
    public function setResourceHandle(string $resourceHandle)
    {
        $this->resourceHandle = $resourceHandle;

        return $this;
    }

    /**
     * Shareable determines whether the resource supports more than one consumer at a time.
     */
    public function isShareable(): ?bool
    {
        return $this->shareable;
    }

    /**
     * Shareable determines whether the resource supports more than one consumer at a time.
     *
     * @return static
     */
    public function setIsShareable(bool $shareable)
    {
        $this->shareable = $shareable;

        return $this;
    }
}
