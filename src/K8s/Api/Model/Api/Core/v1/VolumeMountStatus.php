<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.3
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Core\v1;

use K8s\Core\Annotation as Kubernetes;

/**
 * VolumeMountStatus shows status of volume mounts.
 */
class VolumeMountStatus
{
    /**
     * @Kubernetes\Attribute("mountPath",isRequired=true)
     * @var string
     */
    protected $mountPath;

    /**
     * @Kubernetes\Attribute("name",isRequired=true)
     * @var string
     */
    protected $name;

    /**
     * @Kubernetes\Attribute("readOnly")
     * @var bool|null
     */
    protected $readOnly = null;

    /**
     * @Kubernetes\Attribute("recursiveReadOnly")
     * @var string|null
     */
    protected $recursiveReadOnly = null;

    /**
     * @param string $mountPath
     * @param string $name
     */
    public function __construct(string $mountPath, string $name)
    {
        $this->mountPath = $mountPath;
        $this->name = $name;
    }

    /**
     * MountPath corresponds to the original VolumeMount.
     */
    public function getMountPath(): string
    {
        return $this->mountPath;
    }

    /**
     * MountPath corresponds to the original VolumeMount.
     *
     * @return static
     */
    public function setMountPath(string $mountPath)
    {
        $this->mountPath = $mountPath;

        return $this;
    }

    /**
     * Name corresponds to the name of the original VolumeMount.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Name corresponds to the name of the original VolumeMount.
     *
     * @return static
     */
    public function setName(string $name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * ReadOnly corresponds to the original VolumeMount.
     */
    public function isReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * ReadOnly corresponds to the original VolumeMount.
     *
     * @return static
     */
    public function setIsReadOnly(bool $readOnly)
    {
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An
     * IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on
     * the mount result.
     */
    public function getRecursiveReadOnly(): ?string
    {
        return $this->recursiveReadOnly;
    }

    /**
     * RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An
     * IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on
     * the mount result.
     *
     * @return static
     */
    public function setRecursiveReadOnly(string $recursiveReadOnly)
    {
        $this->recursiveReadOnly = $recursiveReadOnly;

        return $this;
    }
}
