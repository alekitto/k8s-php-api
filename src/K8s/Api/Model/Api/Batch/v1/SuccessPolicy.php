<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.3
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Batch\v1;

use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * SuccessPolicy describes when a Job can be declared as succeeded based on the success of some
 * indexes.
 */
class SuccessPolicy
{
    /**
     * @Kubernetes\Attribute("rules",type="collection",model=SuccessPolicyRule::class,isRequired=true)
     * @var iterable|SuccessPolicyRule[]
     */
    protected $rules;

    /**
     * @param iterable|SuccessPolicyRule[] $rules
     */
    public function __construct(iterable $rules)
    {
        $this->rules = new Collection($rules);
    }

    /**
     * rules represents the list of alternative rules for the declaring the Jobs as successful before
     * `.status.succeeded >= .spec.completions`. Once any of the rules are met, the "SucceededCriteriaMet"
     * condition is added, and the lingering pods are removed. The terminal state for such a Job has the
     * "Complete" condition. Additionally, these rules are evaluated in order; Once the Job meets one of
     * the rules, other rules are ignored. At most 20 elements are allowed.
     *
     * @return iterable|SuccessPolicyRule[]
     */
    public function getRules(): iterable
    {
        return $this->rules;
    }

    /**
     * rules represents the list of alternative rules for the declaring the Jobs as successful before
     * `.status.succeeded >= .spec.completions`. Once any of the rules are met, the "SucceededCriteriaMet"
     * condition is added, and the lingering pods are removed. The terminal state for such a Job has the
     * "Complete" condition. Additionally, these rules are evaluated in order; Once the Job meets one of
     * the rules, other rules are ignored. At most 20 elements are allowed.
     *
     * @return static
     */
    public function setRules(iterable $rules)
    {
        $this->rules = $rules;

        return $this;
    }

    /**
     * @return static
     */
    public function addRules(SuccessPolicyRule $rule)
    {
        if (!$this->rules) {
            $this->rules = new Collection();
        }
        $this->rules[] = $rule;

        return $this;
    }
}
