<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.29.6
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Core\v1;

use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\LabelSelector;
use K8s\Core\Annotation as Kubernetes;

/**
 * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project
 * their contents into the pod filesystem.
 */
class ClusterTrustBundleProjection
{
    /**
     * @Kubernetes\Attribute("labelSelector",type="model",model=LabelSelector::class)
     * @var LabelSelector|null
     */
    protected $labelSelector = null;

    /**
     * @Kubernetes\Attribute("name")
     * @var string|null
     */
    protected $name = null;

    /**
     * @Kubernetes\Attribute("optional")
     * @var bool|null
     */
    protected $optional = null;

    /**
     * @Kubernetes\Attribute("path",isRequired=true)
     * @var string
     */
    protected $path;

    /**
     * @Kubernetes\Attribute("signerName")
     * @var string|null
     */
    protected $signerName = null;

    /**
     * @param string $path
     */
    public function __construct(string $path)
    {
        $this->path = $path;
    }

    /**
     * Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is
     * set.  Mutually-exclusive with name.  If unset, interpreted as "match nothing".  If set but empty,
     * interpreted as "match everything".
     */
    public function getLabelSelector(): ?LabelSelector
    {
        return $this->labelSelector;
    }

    /**
     * Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is
     * set.  Mutually-exclusive with name.  If unset, interpreted as "match nothing".  If set but empty,
     * interpreted as "match everything".
     *
     * @return static
     */
    public function setLabelSelector(LabelSelector $labelSelector)
    {
        $this->labelSelector = $labelSelector;

        return $this;
    }

    /**
     * Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and
     * labelSelector.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and
     * labelSelector.
     *
     * @return static
     */
    public function setName(string $name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using
     * name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the
     * combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
     */
    public function isOptional(): ?bool
    {
        return $this->optional;
    }

    /**
     * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using
     * name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the
     * combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
     *
     * @return static
     */
    public function setIsOptional(bool $optional)
    {
        $this->optional = $optional;

        return $this;
    }

    /**
     * Relative path from the volume root to write the bundle.
     */
    public function getPath(): string
    {
        return $this->path;
    }

    /**
     * Relative path from the volume root to write the bundle.
     *
     * @return static
     */
    public function setPath(string $path)
    {
        $this->path = $path;

        return $this;
    }

    /**
     * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The
     * contents of all selected ClusterTrustBundles will be unified and deduplicated.
     */
    public function getSignerName(): ?string
    {
        return $this->signerName;
    }

    /**
     * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The
     * contents of all selected ClusterTrustBundles will be unified and deduplicated.
     *
     * @return static
     */
    public function setSignerName(string $signerName)
    {
        $this->signerName = $signerName;

        return $this;
    }
}
