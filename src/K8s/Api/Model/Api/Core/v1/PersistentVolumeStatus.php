<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.23.1
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Core\v1;

use K8s\Core\Annotation as Kubernetes;

/**
 * PersistentVolumeStatus is the current status of a persistent volume.
 */
class PersistentVolumeStatus
{
    /**
     * @Kubernetes\Attribute("message")
     * @var string|null
     */
    protected $message = null;

    /**
     * @Kubernetes\Attribute("phase")
     * @var string|null
     */
    protected $phase = null;

    /**
     * @Kubernetes\Attribute("reason")
     * @var string|null
     */
    protected $reason = null;

    /**
     * @param string|null $message
     * @param string|null $phase
     * @param string|null $reason
     */
    public function __construct(?string $message = null, ?string $phase = null, ?string $reason = null)
    {
        $this->message = $message;
        $this->phase = $phase;
        $this->reason = $reason;
    }

    /**
     * A human-readable message indicating details about why the volume is in this state.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * A human-readable message indicating details about why the volume is in this state.
     *
     * @return static
     */
    public function setMessage(string $message)
    {
        $this->message = $message;

        return $this;
    }

    /**
     * Phase indicates if a volume is available, bound to a claim, or released by a claim. More info:
     * https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
     *
     * Possible enum values:
     *  - `"Available"` used for PersistentVolumes that are not yet bound Available volumes are held by the
     * binder and matched to PersistentVolumeClaims
     *  - `"Bound"` used for PersistentVolumes that are bound
     *  - `"Failed"` used for PersistentVolumes that failed to be correctly recycled or deleted after being
     * released from a claim
     *  - `"Pending"` used for PersistentVolumes that are not available
     *  - `"Released"` used for PersistentVolumes where the bound PersistentVolumeClaim was deleted
     * released volumes must be recycled before becoming available again this phase is used by the
     * persistent volume claim binder to signal to another process to reclaim the resource
     */
    public function getPhase(): ?string
    {
        return $this->phase;
    }

    /**
     * Phase indicates if a volume is available, bound to a claim, or released by a claim. More info:
     * https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
     *
     * Possible enum values:
     *  - `"Available"` used for PersistentVolumes that are not yet bound Available volumes are held by the
     * binder and matched to PersistentVolumeClaims
     *  - `"Bound"` used for PersistentVolumes that are bound
     *  - `"Failed"` used for PersistentVolumes that failed to be correctly recycled or deleted after being
     * released from a claim
     *  - `"Pending"` used for PersistentVolumes that are not available
     *  - `"Released"` used for PersistentVolumes where the bound PersistentVolumeClaim was deleted
     * released volumes must be recycled before becoming available again this phase is used by the
     * persistent volume claim binder to signal to another process to reclaim the resource
     *
     * @return static
     */
    public function setPhase(string $phase)
    {
        $this->phase = $phase;

        return $this;
    }

    /**
     * Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and
     * tidy display in the CLI.
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and
     * tidy display in the CLI.
     *
     * @return static
     */
    public function setReason(string $reason)
    {
        $this->reason = $reason;

        return $this;
    }
}
