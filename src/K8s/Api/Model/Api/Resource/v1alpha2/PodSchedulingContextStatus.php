<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.3
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Resource\v1alpha2;

use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * PodSchedulingContextStatus describes where resources for the Pod can be allocated.
 */
class PodSchedulingContextStatus
{
    /**
     * @Kubernetes\Attribute("resourceClaims",type="collection",model=ResourceClaimSchedulingStatus::class)
     * @var iterable|ResourceClaimSchedulingStatus[]|null
     */
    protected $resourceClaims = null;

    /**
     * @param iterable|ResourceClaimSchedulingStatus[] $resourceClaims
     */
    public function __construct(iterable $resourceClaims = [])
    {
        $this->resourceClaims = new Collection($resourceClaims);
    }

    /**
     * ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the
     * corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
     *
     * @return iterable|ResourceClaimSchedulingStatus[]
     */
    public function getResourceClaims(): ?iterable
    {
        return $this->resourceClaims;
    }

    /**
     * ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the
     * corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
     *
     * @return static
     */
    public function setResourceClaims(iterable $resourceClaims)
    {
        $this->resourceClaims = $resourceClaims;

        return $this;
    }

    /**
     * @return static
     */
    public function addResourceClaims(ResourceClaimSchedulingStatus $resourceClaim)
    {
        if (!$this->resourceClaims) {
            $this->resourceClaims = new Collection();
        }
        $this->resourceClaims[] = $resourceClaim;

        return $this;
    }
}
