<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.30.3
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\AdmissionRegistration\v1;

use K8s\Core\Annotation as Kubernetes;

/**
 * ExpressionWarning is a warning information that targets a specific expression.
 */
class ExpressionWarning
{
    /**
     * @Kubernetes\Attribute("fieldRef",isRequired=true)
     * @var string
     */
    protected $fieldRef;

    /**
     * @Kubernetes\Attribute("warning",isRequired=true)
     * @var string
     */
    protected $warning;

    /**
     * @param string $fieldRef
     * @param string $warning
     */
    public function __construct(string $fieldRef, string $warning)
    {
        $this->fieldRef = $fieldRef;
        $this->warning = $warning;
    }

    /**
     * The path to the field that refers the expression. For example, the reference to the expression of
     * the first item of validations is "spec.validations[0].expression"
     */
    public function getFieldRef(): string
    {
        return $this->fieldRef;
    }

    /**
     * The path to the field that refers the expression. For example, the reference to the expression of
     * the first item of validations is "spec.validations[0].expression"
     *
     * @return static
     */
    public function setFieldRef(string $fieldRef)
    {
        $this->fieldRef = $fieldRef;

        return $this;
    }

    /**
     * The content of type checking information in a human-readable form. Each line of the warning contains
     * the type that the expression is checked against, followed by the type check error from the compiler.
     */
    public function getWarning(): string
    {
        return $this->warning;
    }

    /**
     * The content of type checking information in a human-readable form. Each line of the warning contains
     * the type that the expression is checked against, followed by the type check error from the compiler.
     *
     * @return static
     */
    public function setWarning(string $warning)
    {
        $this->warning = $warning;

        return $this;
    }
}
