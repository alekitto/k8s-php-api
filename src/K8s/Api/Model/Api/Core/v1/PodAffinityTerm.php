<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.29.6
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Core\v1;

use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\LabelSelector;
use K8s\Core\Annotation as Kubernetes;

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s))
 * that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where
 * co-located is defined as running on a node whose value of the label with key <topologyKey> matches
 * that of any node on which a pod of the set of pods is running
 */
class PodAffinityTerm
{
    /**
     * @Kubernetes\Attribute("labelSelector",type="model",model=LabelSelector::class)
     * @var LabelSelector|null
     */
    protected $labelSelector = null;

    /**
     * @Kubernetes\Attribute("matchLabelKeys")
     * @var string[]|null
     */
    protected $matchLabelKeys = null;

    /**
     * @Kubernetes\Attribute("mismatchLabelKeys")
     * @var string[]|null
     */
    protected $mismatchLabelKeys = null;

    /**
     * @Kubernetes\Attribute("namespaceSelector",type="model",model=LabelSelector::class)
     * @var LabelSelector|null
     */
    protected $namespaceSelector = null;

    /**
     * @Kubernetes\Attribute("namespaces")
     * @var string[]|null
     */
    protected $namespaces = null;

    /**
     * @Kubernetes\Attribute("topologyKey",isRequired=true)
     * @var string
     */
    protected $topologyKey;

    /**
     * @param string $topologyKey
     */
    public function __construct(string $topologyKey)
    {
        $this->topologyKey = $topologyKey;
    }

    /**
     * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches
     * with no Pods.
     */
    public function getLabelSelector(): ?LabelSelector
    {
        return $this->labelSelector;
    }

    /**
     * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches
     * with no Pods.
     *
     * @return static
     */
    public function setLabelSelector(LabelSelector $labelSelector)
    {
        $this->labelSelector = $labelSelector;

        return $this;
    }

    /**
     * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The
     * keys are used to lookup values from the incoming pod labels, those key-value labels are merged with
     * `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken
     * into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
     * pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both
     * MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
     * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
     */
    public function getMatchLabelKeys(): ?array
    {
        return $this->matchLabelKeys;
    }

    /**
     * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The
     * keys are used to lookup values from the incoming pod labels, those key-value labels are merged with
     * `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken
     * into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
     * pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both
     * MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set.
     * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
     *
     * @return static
     */
    public function setMatchLabelKeys(array $matchLabelKeys)
    {
        $this->matchLabelKeys = $matchLabelKeys;

        return $this;
    }

    /**
     * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration.
     * The keys are used to lookup values from the incoming pod labels, those key-value labels are merged
     * with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be
     * taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the
     * incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist
     * in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when
     * LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity
     * feature gate.
     */
    public function getMismatchLabelKeys(): ?array
    {
        return $this->mismatchLabelKeys;
    }

    /**
     * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration.
     * The keys are used to lookup values from the incoming pod labels, those key-value labels are merged
     * with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be
     * taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the
     * incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist
     * in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when
     * LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity
     * feature gate.
     *
     * @return static
     */
    public function setMismatchLabelKeys(array $mismatchLabelKeys)
    {
        $this->mismatchLabelKeys = $mismatchLabelKeys;

        return $this;
    }

    /**
     * A label query over the set of namespaces that the term applies to. The term is applied to the union
     * of the namespaces selected by this field and the ones listed in the namespaces field. null selector
     * and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all
     * namespaces.
     */
    public function getNamespaceSelector(): ?LabelSelector
    {
        return $this->namespaceSelector;
    }

    /**
     * A label query over the set of namespaces that the term applies to. The term is applied to the union
     * of the namespaces selected by this field and the ones listed in the namespaces field. null selector
     * and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all
     * namespaces.
     *
     * @return static
     */
    public function setNamespaceSelector(LabelSelector $namespaceSelector)
    {
        $this->namespaceSelector = $namespaceSelector;

        return $this;
    }

    /**
     * namespaces specifies a static list of namespace names that the term applies to. The term is applied
     * to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null
     * or empty namespaces list and null namespaceSelector means "this pod's namespace".
     */
    public function getNamespaces(): ?array
    {
        return $this->namespaces;
    }

    /**
     * namespaces specifies a static list of namespace names that the term applies to. The term is applied
     * to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null
     * or empty namespaces list and null namespaceSelector means "this pod's namespace".
     *
     * @return static
     */
    public function setNamespaces(array $namespaces)
    {
        $this->namespaces = $namespaces;

        return $this;
    }

    /**
     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
     * the labelSelector in the specified namespaces, where co-located is defined as running on a node
     * whose value of the label with key topologyKey matches that of any node on which any of the selected
     * pods is running. Empty topologyKey is not allowed.
     */
    public function getTopologyKey(): string
    {
        return $this->topologyKey;
    }

    /**
     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
     * the labelSelector in the specified namespaces, where co-located is defined as running on a node
     * whose value of the label with key topologyKey matches that of any node on which any of the selected
     * pods is running. Empty topologyKey is not allowed.
     *
     * @return static
     */
    public function setTopologyKey(string $topologyKey)
    {
        $this->topologyKey = $topologyKey;

        return $this;
    }
}
