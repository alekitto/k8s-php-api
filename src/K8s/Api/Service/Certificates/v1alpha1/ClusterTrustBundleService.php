<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.28.12
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Service\Certificates\v1alpha1;

use K8s\Api\Model\Api\Certificates\v1alpha1\ClusterTrustBundle;
use K8s\Api\Model\Api\Certificates\v1alpha1\ClusterTrustBundleList;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\Status;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\WatchEvent;
use K8s\Core\Contract\ApiInterface;

class ClusterTrustBundleService
{
    /** @var ApiInterface */
    private $api;

    /** @var string|null */
    private $namespace;

    public function __construct(ApiInterface $api)
    {
        $this->api = $api;
    }

    public function useNamespace(string $namespace): self
    {
        $this->namespace = $namespace;

        return $this;
    }

    /**
     * List or watch objects of kind ClusterTrustBundle
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#list-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function listCertificatesV1alpha1(array $query = []): ClusterTrustBundleList
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = ClusterTrustBundleList::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/clustertrustbundles',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'list',
            $options
        );
    }

    /**
     * Delete collection of ClusterTrustBundle
     *
     * Allowed query parameters:
     *   dryRun
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#delete-collection-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function deleteCertificatesV1alpha1Collection(array $query = []): Status
    {
        $options['query'] = $query;
        $options['method'] = 'delete';
        $options['model'] = Status::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/clustertrustbundles',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'deletecollection',
            $options
        );
    }

    /**
     * Create a ClusterTrustBundle
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#create-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function createCertificatesV1alpha1(ClusterTrustBundle $clusterTrustBundle, array $query = []): ClusterTrustBundle
    {
        $options['query'] = $query;
        $options['method'] = 'post';
        $options['body'] = $clusterTrustBundle;
        $options['model'] = ClusterTrustBundle::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/clustertrustbundles',
            [],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'post',
            $options
        );
    }

    /**
     * Read the specified ClusterTrustBundle
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#read-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function readCertificatesV1alpha1(string $name, array $query = []): ClusterTrustBundle
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = ClusterTrustBundle::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'get',
            $options
        );
    }

    /**
     * Delete a ClusterTrustBundle
     *
     * Allowed query parameters:
     *   dryRun
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#delete-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function deleteCertificatesV1alpha1(string $name, array $query = []): Status
    {
        $options['query'] = $query;
        $options['method'] = 'delete';
        $options['model'] = Status::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'delete',
            $options
        );
    }

    /**
     * Partially update the specified ClusterTrustBundle
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#patch-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function patchCertificatesV1alpha1(string $name, array $query = []): ClusterTrustBundle
    {
        $options['query'] = $query;
        $options['method'] = 'patch';
        $options['model'] = ClusterTrustBundle::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'patch',
            $options
        );
    }

    /**
     * Replace the specified ClusterTrustBundle
     *
     * Allowed query parameters:
     *   dryRun
     *   fieldValidation
     *
     * @param array $query
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#put-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function replaceCertificatesV1alpha1(string $name, ClusterTrustBundle $clusterTrustBundle, array $query = []): ClusterTrustBundle
    {
        $options['query'] = $query;
        $options['method'] = 'put';
        $options['body'] = $clusterTrustBundle;
        $options['model'] = ClusterTrustBundle::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        return $this->api->executeHttp(
            $uri,
            'put',
            $options
        );
    }

    /**
     * Watch individual changes to a list of ClusterTrustBundle. deprecated: use the 'watch' parameter with
     * a list operation instead.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#watchlist-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function watchCertificatesV1alpha1List(array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/watch/clustertrustbundles',
            [],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watchlist',
            $options
        );
    }

    /**
     * Watch changes to an object of kind ClusterTrustBundle. deprecated: use the 'watch' parameter with a
     * list operation instead, filtered to a single item with the 'fieldSelector' parameter.
     *
     * @param array $query
     * @deprecated Use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
     * @link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#watch-clustertrustbundle-v1alpha1-certificates-k8s-io
     */
    public function watchCertificatesV1alpha1(string $name, array $query = []): void
    {
        $options['query'] = $query;
        $options['method'] = 'get';
        $options['model'] = WatchEvent::class;
        $uri = $this->api->makeUri(
            '/apis/certificates.k8s.io/v1alpha1/watch/clustertrustbundles/{name}',
            ['{name}' => $name,],
            $query,
            $this->namespace
        );

        $this->api->executeHttp(
            $uri,
            'watch',
            $options
        );
    }
}
