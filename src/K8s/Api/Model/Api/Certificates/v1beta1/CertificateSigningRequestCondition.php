<?php

/**
 * This file was automatically generated by k8s/api-generator 0.11.0 for API version v1.21.3
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Certificates\v1beta1;

use DateTimeInterface;
use K8s\Core\Annotation as Kubernetes;

class CertificateSigningRequestCondition
{
    /**
     * @Kubernetes\Attribute("lastTransitionTime",type="datetime")
     * @var DateTimeInterface|null
     */
    protected $lastTransitionTime = null;

    /**
     * @Kubernetes\Attribute("lastUpdateTime",type="datetime")
     * @var DateTimeInterface|null
     */
    protected $lastUpdateTime = null;

    /**
     * @Kubernetes\Attribute("message")
     * @var string|null
     */
    protected $message = null;

    /**
     * @Kubernetes\Attribute("reason")
     * @var string|null
     */
    protected $reason = null;

    /**
     * @Kubernetes\Attribute("status")
     * @var string|null
     */
    protected $status = null;

    /**
     * @Kubernetes\Attribute("type",isRequired=true)
     * @var string
     */
    protected $type;

    /**
     * @param string $type
     */
    public function __construct(string $type)
    {
        $this->type = $type;
    }

    /**
     * lastTransitionTime is the time the condition last transitioned from one status to another. If unset,
     * when a new condition type is added or an existing condition's status is changed, the server defaults
     * this to the current time.
     */
    public function getLastTransitionTime(): ?DateTimeInterface
    {
        return $this->lastTransitionTime;
    }

    /**
     * lastTransitionTime is the time the condition last transitioned from one status to another. If unset,
     * when a new condition type is added or an existing condition's status is changed, the server defaults
     * this to the current time.
     *
     * @return static
     */
    public function setLastTransitionTime(DateTimeInterface $lastTransitionTime)
    {
        $this->lastTransitionTime = $lastTransitionTime;

        return $this;
    }

    /**
     * timestamp for the last update to this condition
     */
    public function getLastUpdateTime(): ?DateTimeInterface
    {
        return $this->lastUpdateTime;
    }

    /**
     * timestamp for the last update to this condition
     *
     * @return static
     */
    public function setLastUpdateTime(DateTimeInterface $lastUpdateTime)
    {
        $this->lastUpdateTime = $lastUpdateTime;

        return $this;
    }

    /**
     * human readable message with details about the request state
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * human readable message with details about the request state
     *
     * @return static
     */
    public function setMessage(string $message)
    {
        $this->message = $message;

        return $this;
    }

    /**
     * brief reason for the request state
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * brief reason for the request state
     *
     * @return static
     */
    public function setReason(string $reason)
    {
        $this->reason = $reason;

        return $this;
    }

    /**
     * Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may
     * not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may
     * not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
     *
     * @return static
     */
    public function setStatus(string $status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * type of the condition. Known conditions include "Approved", "Denied", and "Failed".
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * type of the condition. Known conditions include "Approved", "Denied", and "Failed".
     *
     * @return static
     */
    public function setType(string $type)
    {
        $this->type = $type;

        return $this;
    }
}
