<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.26.15
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\AdmissionRegistration\v1alpha1;

use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
 */
class ValidatingAdmissionPolicySpec
{
    /**
     * @Kubernetes\Attribute("failurePolicy")
     * @var string|null
     */
    protected $failurePolicy = null;

    /**
     * @Kubernetes\Attribute("matchConstraints",type="model",model=MatchResources::class)
     * @var MatchResources|null
     */
    protected $matchConstraints = null;

    /**
     * @Kubernetes\Attribute("paramKind",type="model",model=ParamKind::class)
     * @var ParamKind|null
     */
    protected $paramKind = null;

    /**
     * @Kubernetes\Attribute("validations",type="collection",model=Validation::class,isRequired=true)
     * @var iterable|Validation[]
     */
    protected $validations;

    /**
     * @param iterable|Validation[] $validations
     */
    public function __construct(iterable $validations)
    {
        $this->validations = new Collection($validations);
    }

    /**
     * FailurePolicy defines how to handle failures for the admission policy. Failures can occur from
     * invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind
     * refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent
     * resource. Allowed values are Ignore or Fail. Defaults to Fail.
     */
    public function getFailurePolicy(): ?string
    {
        return $this->failurePolicy;
    }

    /**
     * FailurePolicy defines how to handle failures for the admission policy. Failures can occur from
     * invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind
     * refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent
     * resource. Allowed values are Ignore or Fail. Defaults to Fail.
     *
     * @return static
     */
    public function setFailurePolicy(string $failurePolicy)
    {
        $this->failurePolicy = $failurePolicy;

        return $this;
    }

    /**
     * MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy
     * cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from
     * being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy
     * cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
     */
    public function getMatchConstraints(): ?MatchResources
    {
        return $this->matchConstraints;
    }

    /**
     * MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy
     * cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from
     * being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy
     * cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
     *
     * @return static
     */
    public function setMatchConstraints(MatchResources $matchConstraints)
    {
        $this->matchConstraints = $matchConstraints;

        return $this;
    }

    /**
     * ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no
     * parameters for this policy and the param CEL variable will not be provided to validation
     * expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured
     * and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in
     * ValidatingAdmissionPolicyBinding, the params variable will be null.
     */
    public function getParamKind(): ?ParamKind
    {
        return $this->paramKind;
    }

    /**
     * ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no
     * parameters for this policy and the param CEL variable will not be provided to validation
     * expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured
     * and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in
     * ValidatingAdmissionPolicyBinding, the params variable will be null.
     *
     * @return static
     */
    public function setParamKind(ParamKind $paramKind)
    {
        $this->paramKind = $paramKind;

        return $this;
    }

    /**
     * Validations contain CEL expressions which is used to apply the validation. A minimum of one
     * validation is required for a policy definition. Required.
     *
     * @return iterable|Validation[]
     */
    public function getValidations(): iterable
    {
        return $this->validations;
    }

    /**
     * Validations contain CEL expressions which is used to apply the validation. A minimum of one
     * validation is required for a policy definition. Required.
     *
     * @return static
     */
    public function setValidations(iterable $validations)
    {
        $this->validations = $validations;

        return $this;
    }

    /**
     * @return static
     */
    public function addValidations(Validation $validation)
    {
        if (!$this->validations) {
            $this->validations = new Collection();
        }
        $this->validations[] = $validation;

        return $this;
    }
}
