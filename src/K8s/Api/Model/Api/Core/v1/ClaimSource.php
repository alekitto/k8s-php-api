<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.27.15
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Core\v1;

use K8s\Core\Annotation as Kubernetes;

/**
 * ClaimSource describes a reference to a ResourceClaim.
 *
 * Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if
 * it has an unknown value.
 */
class ClaimSource
{
    /**
     * @Kubernetes\Attribute("resourceClaimName")
     * @var string|null
     */
    protected $resourceClaimName = null;

    /**
     * @Kubernetes\Attribute("resourceClaimTemplateName")
     * @var string|null
     */
    protected $resourceClaimTemplateName = null;

    /**
     * @param string|null $resourceClaimName
     * @param string|null $resourceClaimTemplateName
     */
    public function __construct(?string $resourceClaimName = null, ?string $resourceClaimTemplateName = null)
    {
        $this->resourceClaimName = $resourceClaimName;
        $this->resourceClaimTemplateName = $resourceClaimTemplateName;
    }

    /**
     * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
     */
    public function getResourceClaimName(): ?string
    {
        return $this->resourceClaimName;
    }

    /**
     * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
     *
     * @return static
     */
    public function setResourceClaimName(string $resourceClaimName)
    {
        $this->resourceClaimName = $resourceClaimName;

        return $this;
    }

    /**
     * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as
     * this pod.
     *
     * The template will be used to create a new ResourceClaim, which will be bound to this pod. When this
     * pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod
     * name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will
     * reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
     *
     * An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod
     * to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until
     * the unrelated ResourceClaim is removed.
     *
     * This field is immutable and no changes will be made to the corresponding ResourceClaim by the
     * control plane after creating the ResourceClaim.
     */
    public function getResourceClaimTemplateName(): ?string
    {
        return $this->resourceClaimTemplateName;
    }

    /**
     * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as
     * this pod.
     *
     * The template will be used to create a new ResourceClaim, which will be bound to this pod. When this
     * pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod
     * name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will
     * reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
     *
     * An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod
     * to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until
     * the unrelated ResourceClaim is removed.
     *
     * This field is immutable and no changes will be made to the corresponding ResourceClaim by the
     * control plane after creating the ResourceClaim.
     *
     * @return static
     */
    public function setResourceClaimTemplateName(string $resourceClaimTemplateName)
    {
        $this->resourceClaimTemplateName = $resourceClaimTemplateName;

        return $this;
    }
}
